// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/v1/service.proto

package servicev1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1 "go.octolab.org/ecosystem/sparkle/internal/api/service/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "sparkle.service.v1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceWhoAmIProcedure is the fully-qualified name of the Service's WhoAmI RPC.
	ServiceWhoAmIProcedure = "/sparkle.service.v1.Service/WhoAmI"
)

// ServiceClient is a client for the sparkle.service.v1.Service service.
type ServiceClient interface {
	WhoAmI(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PongResponse], error)
}

// NewServiceClient constructs a client for the sparkle.service.v1.Service service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		whoAmI: connect.NewClient[v1.PingRequest, v1.PongResponse](
			httpClient,
			baseURL+ServiceWhoAmIProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	whoAmI *connect.Client[v1.PingRequest, v1.PongResponse]
}

// WhoAmI calls sparkle.service.v1.Service.WhoAmI.
func (c *serviceClient) WhoAmI(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PongResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the sparkle.service.v1.Service service.
type ServiceHandler interface {
	WhoAmI(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PongResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceWhoAmIHandler := connect.NewUnaryHandler(
		ServiceWhoAmIProcedure,
		svc.WhoAmI,
		opts...,
	)
	return "/sparkle.service.v1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceWhoAmIProcedure:
			serviceWhoAmIHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) WhoAmI(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PongResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sparkle.service.v1.Service.WhoAmI is not implemented"))
}
